from __future__ import annotations
from typing import List, Optional

from webscout import LLM
from webscout import WEBS
import warnings

system_message: str = (
    "As AI, you possess internet access and are capable of executing real-time web searches based on user inputs. "
    "You shall utilize this capability to enrich conversations, offer informed insights, and augment your ability to "
    "respond accurately and thoroughly. However, refrain from stating 'You have provided a list of strings,' ensuring "
    "seamless interactions with users. Embrace a responsive demeanor, harnessing available online resources to address "
    "queries, share pertinent content, and facilitate meaningful exchanges. By doing so, you create value through "
    "connection and engagement, ultimately enhancing overall user satisfaction and experience. Additionally, "
    "continue upholding the principles of respect, impartiality, and intellectual integrity throughout all interactions."
)

# Ignore the specific UserWarning
warnings.filterwarnings("ignore", category=UserWarning, module="curl_cffi.aio", lineno=205)
LLM = LLM(model="meta-llama/Meta-Llama-3-70B-Instruct", system_message=system_message)


def chat(
    user_input: str, webs: WEBS, max_results: int = 10
) -> Optional[str]:
    """
    Chat function to perform a web search based on the user input and generate a response using the LLM model.

    Parameters
    ----------
    user_input : str
        The user input to be used for the web search
    webs : WEBS
        The web search instance to be used to perform the search
    max_results : int, optional
        The maximum number of search results to include in the response, by default 10

    Returns
    -------
    Optional[str]
        The response generated by the LLM model, or None if there is no response
    """
    # Perform a web search based on the user input
    search_results: List[str] = []
    for r in webs.text(
        user_input, region="wt-wt", safesearch="off", timelimit="y", max_results=max_results
    ):
        search_results.append(str(r))  # Convert each result to a string

    # Define the messages to be sent, including the user input, search results, and system message
    messages = [
        {"role": "user", "content": user_input + "\n" + "websearch results are:" + "\n".join(search_results)},
    ]

    # Use the chat method to get the response
    response = LLM.chat(messages)

    return response


if __name__ == "__main__":
    while True:
        # Get the user input
        user_input = input("User: ")

        # Perform a web search based on the user input
        with WEBS() as webs:
            response = chat(user_input, webs)

        # Print the response
        if response:
            print("AI:", response)
        else:
            print("No response")
